1.SpringSecurity:
    SpringSecurity是一个强大的可高度定制的认证和授权框架，对于Spring应用来说它是一套Web安全标准。
    SpringSecurity注重于为Java应用提供认证和授权功能，像所有的Spring项目一样，它对自定义需求具有强大的扩展性。
2.JWT:
    2.1含义：WT是JSON WEB TOKEN的缩写，它是基于 RFC 7519 标准定义的一种可以安全传输的的JSON对象，由于使用了数字签名，
        所以是可信任和安全的。
    2.2组成：
       2.2.1  JWT token的格式：header.payload.signature
        2.2.2：header中用于存放签名的生成算法：{"alg": "HS512"}
        2.2.3：payload中用于存放用户名、token的生成时间和过期时间：{"sub":"admin","created":1489079981393,"exp":1489684781}
        2.2.4：signature为以header和payload生成的签名，一旦header和payload被篡改，验证将失败：
        2.2.5：//secret为加密算法的密钥
        String signature = HMACSHA512(base64UrlEncode(header) + "." +base64UrlEncode(payload),secret)
     2.3：JWT实现认证和授权的原理：
         用户调用登录接口，登录成功后获取到JWT的token；
         之后用户每次调用接口都在http的header中添加一个叫Authorization的头，值为JWT的token；
         后台程序通过对Authorization头中信息的解码及数字签名校验来获取其中的用户信息，从而实现认证和授权。
Hutool是一个丰富的Java开源工具包,它帮助我们简化每一行代码，减少每一个方法，mall项目采用了此工具包。
项目使用表说明
    ums_admin：后台用户表
    ums_role：后台用户角色表
    ums_permission：后台用户权限表
    ums_admin_role_relation：后台用户和角色关系表，用户与角色是多对多关系
    ums_role_permission_relation：后台用户角色和权限关系表，角色与权限是多对多关系
    ums_admin_permission_relation：后台用户和权限关系表(除角色中定义的权限以外的加减权限)，加权限是指用户比角色多出的权限，减权限是指用户比角色少的权限

整合SpringSecurity及JWT过程：
    1、pom.xml增加依赖：
    <!--SpringSecurity依赖配置-->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <!--Hutool Java工具包-->
    <dependency>
        <groupId>cn.hutool</groupId>
        <artifactId>hutool-all</artifactId>
        <version>4.5.7</version>
    </dependency>
    <!--JWT(Json Web Token)登录支持-->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt</artifactId>
        <version>0.9.0</version>
    </dependency>

    2、添加JWT token的工具类：JwtTokenUtil
        相关方法说明：
        generateToken(UserDetails userDetails) :用于根据登录用户信息生成token
        getUserNameFromToken(String token)：从token中获取登录用户的信息
        validateToken(String token, UserDetails userDetails)：判断token是否还有效

    3、添加SpringSecurity的配置类：SecurityConfig
    相关依赖及方法说明
        configure(HttpSecurity httpSecurity)：用于配置需要拦截的url路径、jwt过滤器及出异常后的处理器；
        configure(AuthenticationManagerBuilder auth)：用于配置UserDetailsService及PasswordEncoder；
        RestfulAccessDeniedHandler：当用户没有访问权限时的处理器，用于返回JSON格式的处理结果；
        RestAuthenticationEntryPoint：当未登录或token失效时，返回JSON格式的结果；
        UserDetailsService:SpringSecurity定义的核心接口，用于根据用户名获取用户信息，需要自行实现；
        UserDetails：SpringSecurity定义用于封装用户信息的类（主要是用户信息和权限），需要自行实现；
        PasswordEncoder：SpringSecurity定义的用于对密码进行编码及比对的接口，目前使用的是BCryptPasswordEncoder；
        JwtAuthenticationTokenFilter：在用户名和密码校验前添加的过滤器，如果有jwt的token，会自行根据token信息进行登录。
    4、添加RestfulAccessDeniedHandler：当访问接口没有权限时，自定义的返回结果
    5、添加RestAuthenticationEntryPoint：当未登录或者token失效访问接口时，自定义的返回结果
    6、添加AdminUserDetails;SpringSecurity需要的用户详情
    7、添加JwtAuthenticationTokenFilter：JWT登录授权过滤器
        在用户名和密码校验前添加的过滤器，如果请求中有jwt的token且有效，会取出token中的用户名，然后调用SpringSecurity的API进行登录操作

    8、登录注册功能实现
        8.1、添加UmsAdminController类：实现了后台用户登录、注册及获取权限的接口
        8.2、添加UmsAdminService接口和实现类：
        8.3、修改Swagger的配置：通过修改配置实现调用接口自带Authorization头，这样就可以访问需要登录的接口了。
    9、给PmsBrandController接口中的方法添加访问权限
        给查询接口添加pms:brand:read权限
        给修改接口添加pms:brand:update权限
        给删除接口添加pms:brand:delete权限
        给添加接口添加pms:brand:create权限
        例子：
        @PreAuthorize("hasAuthority('pms:brand:read')")
        public CommonResult<List<PmsBrand>> getBrandList() {
            return CommonResult.success(brandService.listAllBrand());
        }


注册已实现，登录功能报空指针问题尚未解决！
